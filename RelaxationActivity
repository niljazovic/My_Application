package com.example.myapplication.ui.theme

import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Icon
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.remember
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import com.example.myapplication.R


data class RelaxationExercise(
    val title: String,
    val description: String,
    val duration: String
)

class RelaxationActivity : ComponentActivity() {
    private lateinit var completedTasks: MutableMap<String, Boolean>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

   
        completedTasks = loadCompletedTasks()

        setContent {
            RelaxationScreen(completedTasks)
        }
    }

    override fun onResume() {
        super.onResume()
      
        completedTasks = loadCompletedTasks()
        setContent {
            RelaxationScreen(completedTasks)
        }
    }

    private fun loadCompletedTasks(): MutableMap<String, Boolean> {
        val sharedPrefs = getSharedPreferences("completed_tasks", Context.MODE_PRIVATE)
        val tasks = mutableMapOf<String, Boolean>()
        listOf("DEEP BREATHING", "PROGRESSIVE MUSCLE RELAXATION", "MINDFUL OBSERVATION").forEach { title ->
            tasks[title] = sharedPrefs.getBoolean(title, false)
        }
        return tasks
    }
}

@Composable
fun RelaxationScreen(completedTasks: Map<String, Boolean>) {
    val context = LocalContext.current

    val exercises = listOf(
        RelaxationExercise(
            title = "DEEP BREATHING",
            description = "Inhale for 4 seconds, hold for 7 seconds, exhale for 8 seconds. Repeat the process until you feel calmed down",
            duration = "5 minutes"
        ),
        RelaxationExercise(
            title = "PROGRESSIVE MUSCLE RELAXATION",
            description = "Tense and relax each muscle group in your body, starting from your toes to your head. Repeat the process until your body feels relaxed",
            duration = "10 minutes"
        ),
        RelaxationExercise(
            title = "MINDFUL OBSERVATION",
            description = "Take a moment to observe your surroundings and notice the details. You should name 15 different things around you.",
            duration = "3 minutes"
        )
    )

    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        items(exercises.size) { index ->
            val exercise = exercises[index]

            
            val iconRes = when (exercise.title) {
                "DEEP BREATHING" -> R.drawable.deep_breathing_icon
                "PROGRESSIVE MUSCLE RELAXATION" -> R.drawable.muscle_relaxation_icon
                "MINDFUL OBSERVATION" -> R.drawable.mindful_observation_icon
                else -> R.drawable.default_icon
            }

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
                    .background(
                        color = if (completedTasks[exercise.title] == true) Color(0xFFA5D6A7) else Color(0xFF90CAF9),
                        shape = RoundedCornerShape(8.dp)
                    )
                    .clickable {
                        val intent = Intent(context, ExerciseDetailActivity::class.java).apply {
                            putExtra("title", exercise.title)
                            putExtra("description", exercise.description)
                            putExtra("duration", exercise.duration)
                        }
                        context.startActivity(intent)
                    }
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = exercise.title,
                        fontSize = 20.sp,
                        color = Color.White,
                        modifier = Modifier.padding(bottom = 4.dp)
                    )
                    Text(
                        text = "Duration: ${exercise.duration}",
                        fontSize = 14.sp,
                        color = Color.White
                    )
                }

                
                Icon(
                    painter = painterResource(id = iconRes),
                    contentDescription = "Exercise Icon",
                    tint = Color.Black,
                    modifier = Modifier
                        .size(40.dp)
                        .padding(end = 8.dp)
                        .clickable {
                            val intent = Intent(context, ExerciseDetailActivity::class.java).apply {
                                putExtra("title", exercise.title)
                                putExtra("description", exercise.description)
                                putExtra("duration", exercise.duration)
                            }
                            context.startActivity(intent)
                        }
                )

                
                if (completedTasks[exercise.title] == true) {
                    Text(
                        text = "âœ”",
                        fontSize = 24.sp,
                        color = Color.Green,
                        modifier = Modifier.padding(start = 8.dp)
                    )
                }
            }
        }
    }
}
